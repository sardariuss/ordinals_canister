type ord_args = record {
  function: ord_function;
  providers: vec provider;
  max_kb_per_item: opt nat64;
};

type ord_function = variant {
  SatRange:           sat_range_args;
  SatInfo:            sat_info_args;
  SatInscriptions:    sat_inscriptions_args;
  InscriptionInfo:    inscription_info_args;
  InscriptionContent: inscription_content_args;
  Brc20Details:       brc20_details_args;
  Brc20Holders:       brc20_holders_args;
};

type sat_range_args           = record { utxos                 : vec utxo; 
                                         exclude_common_ranges : bool;           };
type sat_info_args            = record { ordinal               : nat64;          };
type sat_inscriptions_args    = record { ordinal               : nat64;          
                                         limit                 : nat64;
                                         offset                : nat64;          };
type inscription_info_args    = record { inscription_id        : inscription_id; };
type inscription_content_args = record { inscription_id        : inscription_id; };
type brc20_details_args       = record { ticker                : ticker;         };
type brc20_holders_args       = record { ticker                : ticker;
                                         limit                 : nat64;
                                         offset                : nat64;          };

type response = variant {
  SatRange: sat_ranges;
  SatInfo: sat_info;
  SatInscriptions: hiro_sat_inscriptions;
  InscriptionInfo: hiro_sat_inscription;
  InscriptionContent: inscription_content;
  Brc20Details: brc20_details;
  Brc20Holders: brc20_holders;
};

type utxo = record {
  txid: text;
  vout: nat32;
};

type sat = nat64;

type sat_ranges = record {
  ranges: opt vec sat_range;
  exotic_ranges: opt vec exotic_sat_range;
};

type sat_range = record {
  utxo: text;
  start: nat64;
  size: nat64;
  end: nat64;
  offset: nat64;
};

type exotic_sat_range = record {
  utxo: text;
  start: nat64;
  size: nat64;
  end: nat64;
  offset: nat64;
  rarity: satoshi_rarity;
  satributes : vec text;
};

type satoshi_rarity = variant {
  Common;
  Uncommon;
  Rare;
  Epic;
  Legendary;
  Mythic;
};

type sat_info = record {
  height: nat64;
  cycle: nat64;
  epoch: nat64;
  period: nat64;
  rarity: satoshi_rarity;
};

type hiro_sat_inscription = record {
  id: text;
  number: int64;
  address: text;
  genesis_address: text;
  genesis_block_height: nat64;
  genesis_block_hash: text;
  genesis_tx_id: text;
  genesis_fee: text;
  genesis_timestamp: nat64;
  tx_id: text;
  location: text;
  output: text;
  value: text;
  offset: text;
  sat_ordinal: text;
  sat_rarity: text;
  sat_coinbase_height: nat64;
  mime_type: text;
  content_type: text;
  content_length: nat64;
  timestamp: nat64;
  curse_type: opt text;
  recursive: bool;
  recursion_refs: opt vec text;
};

type hiro_sat_inscriptions = record {
  limit: nat64;
  offset: nat64;
  total: nat64;
  results: vec hiro_sat_inscription;
};

type inscription_id = text;

type inscription_content = vec nat8;

type ticker = text;

type brc20_details = record {
  token: brc20_token;
  supply: brc20_supply;
};

type brc20_token = record {
  id: text;
  number: nat64;
  block_height: nat64;
  tx_id: text;
  address: text;
  ticker: ticker;
  max_supply: text;
  mint_limit: text;
  decimals: nat64;
  deploy_timestamp: nat64;
  minted_supply: text;
  tx_count: nat64;
};

type brc20_supply = record {
  max_supply: text;
  minted_supply: text;
  holders: nat64;
};

type brc20_holders = record {
  limit: nat64;
  offset: nat64;
  total: nat64;
  results: vec brc20_holder;
};

type brc20_holder = record {
  address: text;
  overall_balance: text;
};

type rejection_code = variant {
  NoError;
  SysFatal;
  SysTransient;
  DestinationInvalid;
  CanisterReject;
  CanisterError;
  Unknown;
};

type http_send_error = record {
  rejection_code: rejection_code;
};

type ord_error = variant {
  HttpSendError: http_send_error;
  ResponseError: text;
  ResponseEncodingError: text;
  ResponseDecodingError: text;
  ContextEncodingError: text;
  ContextDecodingError: text;
  NoServiceError: record { providers: vec provider; end_point: end_point; };
  TooFewCycles: record { expected: nat; received: nat; };
  UnexpectedResponseTypeError: response;
};

type multi_ord_result = variant {
  Consistent: response_result;
  Inconsistent: vec record { provider: provider; result: response_result; };
};

type provider = variant {
  Hiro;
  Bitgem;
};

type end_point = variant {
  SatRange;
  SatInfo;
  SatInscriptions;
  InscriptionInfo;
  InscriptionContent;
  Brc20Details;
  Brc20Holders;
};

type response_result = variant {
  Ok: response;
  Err: ord_error;
};

type request_cost_result = variant {
  Ok: nat;
  Err: ord_error;
};

type sat_range_result = variant {
  Ok: sat_ranges;
  Err: ord_error;
};

type sat_info_result = variant {
  Ok: sat_info;
  Err: ord_error;
};

type hiro_sat_inscriptions_result = variant {
  Ok: hiro_sat_inscriptions;
  Err: ord_error;
};

type hiro_sat_inscription_result = variant {
  Ok: hiro_sat_inscription;
  Err: ord_error;
};

type hiro_inscription_content_result = variant {
  Ok: inscription_content;
  Err: ord_error;
};

type brc20_details_result = variant {
  Ok: brc20_details;
  Err: ord_error;
};

type brc20_holders_result = variant {
  Ok: brc20_holders;
  Err: ord_error;
};

service : () -> {

  "request"                  : (ord_args)                 -> (multi_ord_result);

  "request_cost"             : (ord_args)                 -> (request_cost_result);

  "bitgem_sat_range"         : (sat_range_args)           -> (sat_range_result);

  "bitgem_sat_info"          : (sat_info_args)            -> (sat_info_result);

  "hiro_sat_info"            : (sat_info_args)            -> (sat_info_result);

  "hiro_sat_inscriptions"    : (sat_inscriptions_args)    -> (hiro_sat_inscriptions_result);

  "hiro_inscription_info"    : (inscription_info_args)    -> (hiro_sat_inscription_result);

  "hiro_inscription_content" : (inscription_content_args) -> (hiro_inscription_content_result);

  "hiro_brc20_details"       : (brc20_details_args)       -> (brc20_details_result);

  "hiro_brc20_holders"       : (brc20_holders_args)       -> (brc20_holders_result);

  "cycles_balance"           : ()                         -> (nat64);
  
}